/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*\n\nSee README.md\n\n*/\n\n'use strict';\n\nvar _helpers = __webpack_require__(1);\n\nvar helper = _interopRequireWildcard(_helpers);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar GAME_FEE = 2; // £\n// const LATE_TAX = 2       // £/min\n// const LOCAL_STORAGE_NAME = 'footballData'\n// let helper.jsonData\n// let teamA = []\n// let teamB = []\n\nvar LATE_TAX = 1;\nvar teamA = void 0;\nvar teamB = void 0;\n\nfunction deleteAllData() {\n    localStorage.removeItem(helper.LOCAL_STORAGE_NAME);\n    location.reload(); // is the best way to reload the page?\n}\n\nfunction shuffle(array) {\n    // mutates the array\n    // Fisher-Yates (aka Knuth) shuffle\n    // Used like so:\n    // let arr = [2, 11, 37, 42]\n    // arr = shuffle(arr)\n    // console.log(arr)\n\n    var currentIndex = array.length;\n    var temporaryValue = void 0;\n    var randomIndex = void 0;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nfunction findPlayerByName(firstName, lastName) {\n    return helper.jsonData.players.find(function (player) {\n        return player.firstName === firstName && player.lastName === lastName;\n    });\n}\n\nfunction findPlayersBySkillLevel(playersarr, skill) {\n    // requires an array of player objects\n    return playersarr.filter(function (player) {\n        return player.skillLevel === skill;\n    });\n}\n\nfunction justNames(playersArr) {\n    // requires an array of player objects\n    return playersArr.map(function (player) {\n        return player.firstName + ' ' + player.lastName;\n    });\n}\n\nfunction whichTeam(firstName, lastName) {\n    var name = firstName + ' ' + lastName;\n    console.log(name);\n    if (currentGame(helper.jsonData).teamA.includes(name)) {\n        return 'teamA';\n    } else if (currentGame(helper.jsonData).teamB.includes(name)) {\n        return 'teamB';\n    } else {\n        return undefined; // TODO: what to return here?\n    }\n}\n\nfunction currentGame(jsonData) {\n    return jsonData.games[jsonData.games.length - 1];\n}\n\nfunction back() {\n    // used for back-button. Should this be better named?\n    location.reload();\n}\n\nfunction consoleLogDb() {\n    console.log(JSON.stringify(helper.jsonData, null, 2));\n}\n\nfunction genTestData() {\n    // Just for testing\n    createNewPlayer('Tim', 'Handy', 'tim@tim.com', 2);\n    createNewPlayer('Jade', 'Andrews', 'jade@jade.com', 1);\n    createNewPlayer('Sarah', 'Connop', 'sarah@sarah.com', 1);\n    createNewPlayer('Jane', 'Doe', 'jane@jane.com', 2);\n    createNewPlayer('Chris', 'Rollins', 'chris@chris.com', 1);\n    createNewPlayer('Diego', 'Maradona', 'diego@diego.com', 3);\n    createNewPlayer('David', 'Beckham', 'becks@becks.com', 3);\n    createNewPlayer('Misako', 'Cedeira', 'misako@mis.com', 1);\n    createNewPlayer('Karl', 'Cedeira', 'karl@cedeira.com', 2);\n    createNewPlayer('Leah', 'Andrews', 'leah@andrews.com', 1);\n    createNewPlayer('Damo', 'Connop', 'damo@wolves.com', 3);\n\n    $('.gen-test-data').addClass('hidden');\n}\n\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.toLowerCase().slice(1);\n}\n\n// End Helper functions ########################################################\n\nfunction chargePlayers(gameFee, jsonData) {\n    var teamA = currentGame(jsonData).teamA;\n    var teamB = currentGame(jsonData).teamB;\n    var players = teamA.concat(teamB);\n    players.forEach(function (player) {\n        var first = player.split(' ')[0];\n        var last = player.split(' ')[1];\n        findPlayerByName(first, last).moniesOwed += gameFee;\n    });\n    currentGame(jsonData);\n}\n\nfunction createNewPlayer(firstName, lastName, email, skillLevel) {\n    var obj = {\n        created: Date.now(), // TODO: should this be human readable? Probably. Or should it be like this so that I could run other functions against the date? e.g. show all games from last month etc.?\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        active: true,\n        skillLevel: skillLevel,\n        leagueScore: 0,\n        leagueGoalsScored: 0\n    };\n\n    // TODO: appears to be a crossover of responsibility between this function and newPlayerForm ? should these be merged? But then I couldn't call createNewPlayer() manually  it would need to pull the data from the form. Where should the form validation go? (It currently goes on the createNewPlayerFromForm)\n\n    helper.jsonData.players.push(obj);\n    $('.intro-para').addClass('hidden');\n    helper.saveData();\n}\n\nfunction toggleNewPlayer() {\n    // Show the new player form\n    $('.new-player-form').removeClass('hidden');\n    $('.intro-para').addClass('hidden');\n    $('#new-player-button').addClass('hidden');\n    $('#select-players-button').addClass('hidden');\n    $('#back-button').removeClass('hidden');\n}\n\nfunction createNewPlayerFromForm() {\n    $('#back-button').removeClass('hidden');\n\n    var form = document.getElementById('new-player');\n    var firstName = capitalizeFirstLetter(form.fname.value.trim().split(' ').join(''));\n    var lastName = capitalizeFirstLetter(form.lname.value.trim().split(' ').join(''));\n    var email = form.email.value.toLowerCase();\n    var skillLevel = parseInt(form.skill.value);\n    if (firstName === 'Firstname' || firstName === '') {\n        var msg = 'First Name is required';\n        $('#user-input-error').html('<h3>' + msg + '</h3>').removeClass('hidden'); // TODO: lots of code to DRY up.\n        return;\n    } else if (lastName === 'Lastname' || lastName === '') {\n        var _msg = 'Last Name is required';\n        $('#user-input-error').html('<h3>' + _msg + '</h3>').removeClass('hidden');\n        return;\n    } else if (fullNameExists(firstName, lastName)) {\n        var _msg2 = 'Player name already exists';\n        $('#user-input-error').html('<h3>' + _msg2 + '</h3>').removeClass('hidden');\n    } else if (email === 'email' || emailExists(email) || !validateEmail(email || email === '')) {\n        var _msg3 = 'A valid email address is required. Email must not be a duplicate.';\n        $('#user-input-error').html('<h3>' + _msg3 + '</h3>').removeClass('hidden');\n        return;\n    } else if (skillLevel === 'Skill level (1-3)' || !(skillLevel > 0 && skillLevel < 4)) {\n        var _msg4 = 'Skill level is required';\n        $('#user-input-error').html('<h3>' + _msg4 + '</h3>').removeClass('hidden');\n        return;\n    } else {\n        createNewPlayer(firstName, lastName, email, skillLevel);\n        $('#user-input-error').addClass('hidden');\n        $('#user-input-error').html('<h3>' + 'Player added successfully' + '</h3>').removeClass('hidden');\n    }\n    // FIXME: notify user of success/fail on adding a new player\n    // FIXME: When click in the form fields the contents should highlight select all to allow overwrite\n}\n\nfunction emailExists(email) {\n    return helper.jsonData.players.some(function (player) {\n        return player.email === email;\n    });\n}\n\nfunction fullNameExists(firstName, lastName) {\n    return helper.jsonData.players.some(function (player) {\n        return player.firstName === firstName && player.lastName === lastName;\n    });\n}\n\nfunction validateEmail(email) {\n    // quick dirty regex email validation\n    var regex = /^(([^<>()\\[\\]\\\\., :\\s@\"]+(\\.[^<>()\\[\\]\\\\., :\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return regex.test(email);\n}\n\n// TODO: need GUI to be able to add moniesOwed to player. Maybe in the edit page?\n\n// TODO: MVC? Move all functions into respective sections... for Model, View, and Controller? Might make it easier to understand what's going on?\n\nfunction retirePlayerToggle(firstName, lastName) {\n    // sets player as not active. Removes player from stats display\n    var player = findPlayerByName(firstName, lastName);\n    if (player.moniesOwed !== 0) {\n        return 'Monies owed is not zero! Unable to retire player. Monies owed: \\xA3' + player.moniesOwed;\n    } else if (player.active) {\n        player.active = false;\n        player.dateDisabled = Date();\n    } else if (!player.active) {\n        player.active = true;\n        delete player.dateDisabled;\n    }\n    helper.saveData();\n}\n\nfunction setSkillLevel(firstName, lastName, skillLevel) {\n    // helper.jsonData is an object, containing a players key, whose value is an array of player objects.\n    var player = findPlayerByName(firstName, lastName);\n    if (player) {\n        player.skillLevel = skillLevel;\n    } else {\n        console.log('Player does not exist');\n    }\n    helper.saveData();\n}\n\nfunction editPlayer() {\n    // TODO: or just do it from a view of player data? Drop down for player to display their info, then edit required fields and save back to the DB in one go.\n}\n\nfunction updateMoniesOwed(firstName, lastName, currencyValue) {\n    // Can be plus or minus £/$\n    // update helper.jsonData moniesOwed field\n    findPlayerByName(firstName, lastName).moniesOwed += currencyValue;\n    helper.saveData();\n}\n\n// function newSeason() {  //TODO: write this newSeason function\n//   // Archive off this season's data (previousGameStats and helper.jsonData to another file) then wipe\n//   // Create a new localStorage entry and copy all data to that one\n//   // This seasons data, including all stats, but leaving players and moniesOwed (reset their scores)\n// }\n\n// function newFixture() {\n//   // Generate a new game date for the calendar and maybe email the 'active' status players\n// }\n\n// TODO: appears to be a lot of firstName, lastName being passed around... can I fix that??? What would be simpler or more appropriate?\n\n// Pre-game ####################################################################\n\nfunction playerLate(firstName, lastName, minutesLate) {\n    // TODO: Add this to edit player page?\n    var tax = LATE_TAX * minutesLate;\n\n    var player = findPlayerByName(firstName, lastName);\n    player.moniesOwed += tax;\n    // later could have the app do the time keeping, and generate the mins late from the time of the game start?\n}\n\nfunction displayAvailablePlayers() {\n    // TODO: is this mixing controller and view?\n    // generate an li for each player in players\n    var players = justNames(helper.jsonData.players).sort(); // ['Tim Handy', 'Jade Andrews']\n    var list = $('#select-players ul');\n    var template = $('#players-template').html();\n    $(list).html('');\n    players.forEach(function (player) {\n        $(list).append(Mustache.render(template, player));\n        // FIXME: Mustache: why does this render a load of spaces/tabs? and a newline in the html? see inspect on one of the li elements.\n    });\n    $('.intro-para').addClass('hidden');\n    $('.available-players').removeClass('hidden');\n    $('.generate-teams').removeClass('hidden');\n    $('#select-players-button').addClass('hidden');\n    $('#new-player-button').addClass('hidden');\n    $('#back-button').removeClass('hidden');\n}\n\nvar chosenPlayers = []; // TODO: dirty global letiable, refactor to remove\nfunction choosePlayers() {\n    var players = document.getElementsByName('player');\n    players = Array.prototype.slice.call(players);\n    for (var i = 0; i < players.length; i++) {\n        // TODO: dirty for loop, use filter instead\n        if (players[i].checked) {\n            chosenPlayers.push(players[i]);\n        }\n    }\n\n    chosenPlayers = chosenPlayers.map(function (player) {\n        return player.value;\n    }).map(function (player) {\n        return findPlayerByName(player.split(' ')[0], player.split(' ')[1]);\n    });\n    return chosenPlayers; // TODO: not sure I need to return this right now, as the function sets the let chosenPlayers. Dirty. make other functions use this function as a return expression.\n\n    // TODO: seems to be a lot going on with letiables of chosenPlayers without being saved to storage, maybe chosen players should be stored early on?\n}\n\n// TODO: this is a massive function. Is this wrong?\n// QUESTION: Should the click handler functions be named xxxxHandler so it can be seen that they have an event related to them?\nfunction generateTeams(chosenPlayers, callback) {\n    teamA = [];\n    teamB = [];\n    var players = chosenPlayers.slice(0); // QUESTION: makes a copy of chosenPlayers  ['Tim Handy', 'Jade Andrews']. Is this the right thing to do so as to not mutate the original array?\n    // TODO: validate the generateTeams button, there must be > 1 players selected\n\n    var threeStarPlayers = shuffle(justNames(findPlayersBySkillLevel(players, 3))); // ['David Beckham', 'Diego Maradonna']. TODO Think I've just created objects (choosePlayers) from strings and then back again to strings in here!\n    var twoStarPlayers = shuffle(justNames(findPlayersBySkillLevel(players, 2)));\n    var oneStarPlayers = shuffle(justNames(findPlayersBySkillLevel(players, 1)));\n\n    var lineUp = threeStarPlayers.concat(twoStarPlayers, oneStarPlayers);\n    console.log('Lineup: ', lineUp); // ['David Beckham', 'Diego Maradonna', \"Damo Connop\", \"Tim Handy\", \"Jane Doe\", \"Karl Cedeira\", \"Chris Rollins\", \"Jade Andrews\", \"Leah Andrews\"]\n\n    while (lineUp.length > 0) {\n        teamA.push(lineUp.pop());\n        teamB.push(lineUp.pop()); // TODO: does this need to be a callback so that it does it in order? Not sure why it seems to do it ok... because it's a quick operation?\n    }\n\n    teamB = teamB.filter(Boolean); // remove an 'undefined' from teamB if uneven number of players.\n\n    if (teamA.length !== teamB.length) {\n        // aid in evening up teams if uneven number of skillLevel 3 players\n        teamB.unshift(teamA.shift()); // moves a skillLevel 1 player from team A to team B\n    }\n\n    console.log('Team A: ', teamA);\n    console.log('Team B: ', teamB);\n\n    $('#team-a').html(teamA.map(function (name) {\n        // TODO: this is mixing view code with the model code. Bad? Maybe should have an updateTeamView function or something?\n        if (teamA.indexOf(name) === teamA.length - 1) {\n            return name;\n        } else {\n            return name + ', ';\n        }\n    }));\n\n    $('#team-b').html(teamB.map(function (name) {\n        // TODO: this is doing same as above, so DRY it up?\n        if (teamB.indexOf(name) === teamB.length - 1) {\n            return name;\n        } else {\n            return name + ', ';\n        }\n    }));\n    $('.intro-para').addClass('hidden'); // TODO: should this all be wrapped up in a function?\n    $('.generate-teams').addClass('hidden');\n    $('.kickoff').removeClass('hidden');\n    $('.players').removeClass('hidden');\n    $('.available-players').addClass('hidden');\n    $('.new-player-form').addClass('hidden');\n\n    if (callback) {\n        callback();\n    }\n\n    // helper.saveData()    // don't need to save here, not necessary until the 'Kickoff' button pressed?\n}\n\nfunction wrapperforGenerateTeams() {\n    // TODO: this is shitty having to make a wrapper. it's also a noun, not a verb.\n    generateTeams(choosePlayers()); // TODO: can I put this directly into the click handler?\n}\n\n// Game-time  ##################################################################\n\nfunction kickOff() {\n    generateGame(teamA, teamB); // this should not have a global vars for teamA and B, they should come from helper.jsonData, and be passed in as a var.\n    chargePlayers(GAME_FEE, helper.jsonData);\n    populatePlayerDropdown(teamA.concat(teamB));\n    $('.game-date').html(currentGame(helper.jsonData).date);\n    $('.game-date-div').removeClass('hidden');\n    $('.game').removeClass('hidden');\n    $('.goal').removeClass('hidden');\n    $('.final-whistle').removeClass('hidden');\n    $('.kickoff').addClass('hidden');\n    $('.generate-teams').addClass('hidden');\n    $('.delete-game').removeClass('hidden');\n    $('#back-button').addClass('hidden');\n}\n\nfunction populatePlayerDropdown(playerNamesArr) {\n    var players = playerNamesArr;\n    var list = $('#dropdown-options');\n    $(list).html('<option>Player Name</option>');\n    players.forEach(function (player) {\n        $(list).append('<option>' + player + '</option>');\n    });\n}\n\nfunction generateGame(teamA, teamB) {\n    var game = {\n        date: Date(),\n        teamA: teamA, // ['Tim Handy', 'Karl Cedeira']\n        teamB: teamB, // ['Jade Andrews', 'Sarah Connop']\n        teamAScore: 0,\n        teamBScore: 0,\n        scorers: [], // ['Tim Handy', 'Jade Andrews', 'Karl Cedeira']  order in which goals were scored\n        endTime: undefined // TODO: undefined or null?? which is most appropriate? Think undefined is for properties and vals, and null is for objects.\n    };\n\n    helper.jsonData.games.push(game);\n    helper.saveData();\n}\n\nfunction goalHandler() {\n    var dropdown = document.getElementById('dropdown-options'); // QUESTION: is there a better way to do a dropdown here?\n    var player = dropdown.options[dropdown.selectedIndex].value;\n    var firstName = player.split(' ')[0];\n    var lastName = player.split(' ')[1];\n    goalScored(firstName, lastName);\n    // TODO: validation: must choose a real player. 'Player Name' should not be a valid choice.\n    // TODO: set dropdown back to 'Player Name' after valid goal button press\n    // TODO: make the dropdown more visible  background color?\n}\n\nfunction goalScored(firstName, lastName) {\n    if (!currentGame(helper.jsonData).endTime) {\n        currentGame(helper.jsonData).scorers.push(firstName + ' ' + lastName);\n        console.log('Scorer: ' + firstName + ' ' + lastName + ' added');\n        updatePlayerLeagueGoalsScored(firstName, lastName, 1); // TODO: should only be added at final whistle in case game is cancelled  move this, or set a cancel function to reverse the change?\n        updateGameScore(firstName, lastName);\n        $('.team-a-score').html(currentGame(helper.jsonData).teamAScore);\n        $('.team-b-score').html(currentGame(helper.jsonData).teamBScore);\n        // TODO: player name on the dropdown should default back to 'Player Name' after goal button is pressed\n        // TODO: update the players list at the top with goals scored: Team A: Chris Rollins(1), Damo Connop(5) etc.\n        helper.saveData();\n    } else {\n        console.log('game has already ended');\n    }\n}\n\nfunction updateGameScore(firstName, lastName) {\n    if (whichTeam(firstName, lastName) === 'teamA') {\n        currentGame(helper.jsonData).teamAScore += 1;\n    } else if (whichTeam(firstName, lastName) === 'teamB') {\n        currentGame(helper.jsonData).teamBScore += 1;\n    } else {\n        console.log('player not on either team?');\n    }\n}\n\nfunction updatePlayerLeagueGoalsScored(firstName, lastName, goalsScored) {\n    var player = findPlayerByName(firstName, lastName);\n    console.log(player);\n    player.leagueGoalsScored ? player.leagueGoalsScored += 1 : player.leagueGoalsScored = goalsScored; // need a ternary because it wouldn't += on a null or missing key\n    helper.saveData();\n    // TODO: this should only be added at final whistle, in case game is cancelled\n}\n\nfunction assignWinningPoints(callback) {\n    // TODO: Looks ripe for refactoring\n    // if draw\n    if (currentGame(helper.jsonData).endTime) {\n        if (currentGame(helper.jsonData).teamAScore === currentGame(helper.jsonData).teamBScore) {\n            // each player on both sides gets 2 leagueScore point\n            for (var i = 0; i < currentGame(helper.jsonData).teamA.length; i++) {\n                // TODO: use a .map here?\n                var name = currentGame(helper.jsonData).teamA[i].split(' ');\n                var firstName = name[0];\n                var lastName = name[1];\n                updatePlayerLeagueScore(firstName, lastName, 2);\n            }\n            for (var _i = 0; _i < currentGame(helper.jsonData).teamB.length; _i++) {\n                var _name = currentGame(helper.jsonData).teamB[_i].split(' ');\n                var _firstName = _name[0];\n                var _lastName = _name[1];\n                updatePlayerLeagueScore(_firstName, _lastName, 2);\n            }\n            // if teamA won\n        } else if (currentGame(helper.jsonData).teamAScore > currentGame(helper.jsonData).teamBScore) {\n            for (var _i2 = 0; _i2 < currentGame(helper.jsonData).teamA.length; _i2++) {\n                var _name2 = currentGame(helper.jsonData).teamA[_i2].split(' ');\n                var _firstName2 = _name2[0];\n                var _lastName2 = _name2[1];\n                updatePlayerLeagueScore(_firstName2, _lastName2, 3);\n            }\n            for (var _i3 = 0; _i3 < currentGame(helper.jsonData).teamB.length; _i3++) {\n                var _name3 = currentGame(helper.jsonData).teamB[_i3].split(' ');\n                var _firstName3 = _name3[0];\n                var _lastName3 = _name3[1];\n                updatePlayerLeagueScore(_firstName3, _lastName3, 1);\n            }\n            // if teamB won\n        } else if (currentGame(helper.jsonData).teamAScore < currentGame(helper.jsonData).teamBScore) {\n            for (var _i4 = 0; _i4 < currentGame(helper.jsonData).teamA.length; _i4++) {\n                var _name4 = currentGame(helper.jsonData).teamA[_i4].split(' ');\n                var _firstName4 = _name4[0];\n                var _lastName4 = _name4[1];\n                updatePlayerLeagueScore(_firstName4, _lastName4, 1);\n            }\n            for (var _i5 = 0; _i5 < currentGame(helper.jsonData).teamB.length; _i5++) {\n                var _name5 = currentGame(helper.jsonData).teamB[_i5].split(' ');\n                var _firstName5 = _name5[0];\n                var _lastName5 = _name5[1];\n                updatePlayerLeagueScore(_firstName5, _lastName5, 3);\n            }\n        }\n    } else {\n        console.log('game end time not set');\n    }\n\n    if (callback) {\n        callback();\n    }\n}\n\nfunction updatePlayerLeagueScore(firstName, lastName, points) {\n    var player = findPlayerByName(firstName, lastName);\n    if (player.leagueScore) {\n        // TODO: try with a ternary now it's working\n        player.leagueScore += points;\n    } else {\n        player.leagueScore = points;\n    }\n    helper.saveData();\n}\n\nfunction finalWhistle() {\n    // TODO: rename with ...Handler?\n    setGameEndTime();\n    assignWinningPoints(function () {\n        getLeagueStats(helper.jsonData);\n\n        $('.final-score').removeClass('hidden');\n        $('.final-score p:nth-of-type(1)').html('Team A: ' + currentGame(helper.jsonData).teamAScore);\n        $('.final-score p:nth-of-type(2)').html('Team B: ' + currentGame(helper.jsonData).teamBScore);\n        var gameScorers = currentGame(helper.jsonData).scorers;\n        gameScorers = gameScorers.map(function (player) {\n            if (gameScorers.indexOf(player) === gameScorers.length - 1) {\n                return player;\n            } else {\n                return player + ', ';\n            }\n        });\n\n        $('.final-score p:nth-of-type(2)').append('<p>Scorers: ' + gameScorers.join('') + '</p>');\n        $('.goal').addClass('hidden');\n        $('.final-whistle').addClass('hidden');\n        $('.game').addClass('hidden');\n        $('#back-button').removeClass('hidden');\n        $('#back-button').addClass('btn-primary').removeClass('btn-default');\n    });\n}\n\nfunction setGameEndTime() {\n    // update latest game's endTime. This is used to determine whether game complete or not.\n    currentGame(helper.jsonData).endTime = Date();\n    helper.saveData();\n}\n\nfunction deleteCurrentGame(jsonData) {\n    jsonData.games.splice(-1, 1);\n    helper.saveData();\n    // TODO: this should remove any scores added to players scores\n    // TODO: add a 'are you sure, yes/no' thing. modal?\n}\n\n// Game stats functions ########################################################\n\nfunction getLeagueStats(jsonData) {\n    // Mixed model and view? ...this also displays data. maybe this should be broken into two: a getstats and an update view type function\n    var players = jsonData.players.map(function (player) {\n        return {\n            playerName: player.firstName + ' ' + player.lastName,\n            leagueScore: player.leagueScore,\n            leagueGoalsScored: player.leagueGoalsScored\n        };\n    });\n    // TODO: require a .filter here to remove the player.active === false users. Don't want to display the inactive users.\n    players.sort(function (a, b) {\n        return b.leagueScore - a.leagueScore;\n    });\n    $('#league-stats').removeClass('hidden');\n    $('#league-stats ul').html('');\n    players.forEach(function (player) {\n        if (player.leagueScore > 0 || player.leagueGoalsScored > 0) {\n            $('#league-stats ul').append('<li>' + player.leagueScore + ' points: ' + player.playerName + ' (Goals: ' + player.leagueGoalsScored + ') </li>');\n        }\n        console.log(player.leagueScore + ': ' + player.playerName);\n    });\n\n    // IDEA: For manager: highlight low skill level but high score... indicator of incorrect skill score?\n    // IDEA: Scores are emailed out to all active players.\n}\n\nfunction displayRawData() {\n    document.write(localStorage.getItem(LOCAL_STORAGE_NAME));\n}\n\n// If database is present and game ongoing, i.e. no endTime, restore previous gamestate\n$(document).ready(function () {\n\n    helper.getData(function () {\n        if (helper.jsonData.players == 0) {\n            // QUESTION: why does this not work with strict === ?\n            $('.intro-para').removeClass('hidden');\n            console.log('should have hidden intro');\n        }\n        if (helper.jsonData.players.length > 0) {\n            $('.gen-test-data').addClass('hidden');\n            $('.intro-para').addClass('hidden');\n        }\n\n        if (helper.jsonData.games.length > 0) {\n            getLeagueStats(helper.jsonData);\n            $('#league-stats').removeClass('hidden');\n        }\n\n        // TODO: make this into a 'recover state' type function that can be called in several places.\n        if (localStorage.getItem(helper.LOCAL_STORAGE_NAME) && currentGame(helper.jsonData) && !currentGame(helper.jsonData).hasOwnProperty('endTime')) {\n            $('.intro-para').addClass('hidden'); // TODO: this is a lot of jquery... might want to combine some of this into divs?\n            $('.gen-test-data').addClass('hidden');\n            $('#select-players-button').addClass('hidden');\n            $('#new-player-button').addClass('hidden');\n            $('.game-date').html(currentGame(helper.jsonData).date); // TODO: chop off the GMT bit: Tue Oct 18 2016 16:52:29 GMT+0100 (BST)\n            $('.game-date-div').removeClass('hidden');\n            $('.players').removeClass('hidden');\n            $('.available-players').addClass('hidden');\n            $('.new-player-form').addClass('hidden');\n            $('.game span').html(currentGame(helper.jsonData).date);\n            $('.goal').removeClass('hidden');\n            $('.final-whistle').removeClass('hidden');\n            $('.kickoff').addClass('hidden');\n            $('.generate-teams').addClass('hidden');\n            $('#team-a').html(currentGame(helper.jsonData).teamA.map(function (name) {\n                return name + ', ';\n            }));\n            $('#team-b').html(currentGame(helper.jsonData).teamB.map(function (name) {\n                return name + ', ';\n            }));\n            $('.team-a-score').html(currentGame(helper.jsonData).teamAScore);\n            $('.team-b-score').html(currentGame(helper.jsonData).teamBScore);\n            $('.delete-game').removeClass('hidden');\n            $('#back-button').addClass('hidden');\n            populatePlayerDropdown(currentGame(helper.jsonData).teamA.concat(currentGame(helper.jsonData).teamB));\n        } else {\n            //$('.gen-test-data').removeClass('hidden')\n            $('#back-button').addClass('hidden');\n        }\n    }); // TODO: should this be wrapped in an 'init' function so it's clear what's going on?\n});\n\n$('#new-player-button').click(function () {\n    toggleNewPlayer();\n});\n\n$('#new-player-submit-button').click(function () {\n    createNewPlayerFromForm();\n});\n\n$('#select-players-button').click(function () {\n    displayAvailablePlayers();\n});\n\n$('#generate-teams-button').click(function () {\n    wrapperforGenerateTeams();\n});\n\n$('#kickoff-button').click(function () {\n    kickOff();\n});\n\n$('#goal-button').click(function () {\n    goalHandler();\n});\n\n$('#final-whistle-button').click(function () {\n    finalWhistle();\n});\n\n$('#back-button').click(function () {\n    back();\n});\n\n$('#delete-game-button').click(function () {\n    deleteCurrentGame(helper.jsonData);\n    location.reload();\n});\n\n$('#delete-db-button').click(function () {\n    deleteAllData();\n    location.reload();\n});\n\n$('#generate-test-players-button').click(function () {\n    genTestData();\n    //location.reload()\n});\n\n$('#consolelog-db-button').click(function () {\n    consoleLogDb();\n    location.reload();\n});\n\n// TODO: check for remaining functions written but not implemented\n// TODO: add bootstrap - it looks bad on a phone in particular\n// TODO: allow adding a player once game is in progress. late players? maybe a dropdown of remaining unchosen players displayed whilst game is in progress.\n// TODO: add some font awesome icons to buttons\n\n// Data storage format:\n// helper.jsonData = {\n//   \"players\": [      // array of objects, so can iterate through the array of objects\n//     {\n//       \"created\": 1476284285984,\n//       \"firstName\": \"Tim\",\n//       \"lastName\": \"Handy\",\n//       \"email\": \"tim@tim.com\",\n//       \"active\": true,\n//       \"skillLevel\": 2,\n//       \"moniesOwed\": 10,\n//     \"leagueScore\": 0,\n//       \"leagueGoalsScored\": 5\n//     },\n//   ],\n//   \"games\": [\n//     {\n//       \"date\": \"Wed Oct 12 2016 15:58:05 GMT+0100 (BST)\",\n//       \"teamA\": [\n//         \"Jane Doe\",\n//         \"David Beckham\",\n//         \"Leah Andrews\",\n//         \"Tim Handy\",\n//         \"Diego Maradonna\",\n//         \"Misako Cedeira\"\n//       ],\n//       \"teamB\": [\n//         \"Chris Rollins\",\n//         \"John Doe\",\n//         \"Joe Bloggs\",\n//         \"Jade Andrews\",\n//         \"Karl Cedeira\"\n//       ],\n//       \"teamAScore\": 2,\n//       \"teamBScore\": 1,\n//       \"scorers\": [\n//         \"Dave Jones\",\n//         \"Jade Andrews\",\n//         \"Jade Andrews\",\n//         \"Karl Cedeira\",\n//         \"Tim Handy\",\n//         \"Tim Handy\",\n//         \"Tim Handy\",\n//         \"Chris Rollins\"\n//       ],\n//       \"endTime\": null\n//     }\n//   ]\n// }\n\n\n// learn testing: mocha\n//\n// don't do assertion libraries (eg. chai) yet!\n//\n// use the node.js built in assert library. require asserts.\n//\n// testing math.random. pass in a seed value. google seeded random generator.//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getData = getData;\nexports.saveData = saveData;\nvar LOCAL_STORAGE_NAME = exports.LOCAL_STORAGE_NAME = 'footballData';\n\nvar jsonData = exports.jsonData = {};\n\n// Retrieve data from localStorage\nfunction getData(callback) {\n    //QUESTION: is this correct to pass in global vars like this in a module function?\n    var str = localStorage.getItem(LOCAL_STORAGE_NAME);\n    exports.jsonData = jsonData = JSON.parse(str);\n    if (!jsonData) {\n        exports.jsonData = jsonData = {\n            players: [],\n            games: []\n        };\n    }\n    if (callback) {\n        callback();\n    }\n}\n\n// Save data to localStorage\nfunction saveData() {\n    var str = JSON.stringify(jsonData);\n    localStorage.setItem(LOCAL_STORAGE_NAME, str); //setItem and getItem are pretty much all you can do with localStorage\n    console.log(JSON.stringify(jsonData, null, 2));\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9oZWxwZXJzLmpzPzUyMjAiXSwibmFtZXMiOlsiZ2V0RGF0YSIsInNhdmVEYXRhIiwiTE9DQUxfU1RPUkFHRV9OQU1FIiwianNvbkRhdGEiLCJjYWxsYmFjayIsInN0ciIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJKU09OIiwicGFyc2UiLCJwbGF5ZXJzIiwiZ2FtZXMiLCJzdHJpbmdpZnkiLCJzZXRJdGVtIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFLZ0JBLE8sR0FBQUEsTztRQWVBQyxRLEdBQUFBLFE7QUFwQlQsSUFBTUMsa0RBQXFCLGNBQTNCOztBQUVBLElBQUlDLDhCQUFXLEVBQWY7O0FBRVA7QUFDTyxTQUFTSCxPQUFULENBQWlCSSxRQUFqQixFQUEyQjtBQUFJO0FBQ2xDLFFBQU1DLE1BQU1DLGFBQWFDLE9BQWIsQ0FBcUJMLGtCQUFyQixDQUFaO0FBQ0EsWUFMT0MsUUFLUCxjQUFXSyxLQUFLQyxLQUFMLENBQVdKLEdBQVgsQ0FBWDtBQUNBLFFBQUksQ0FBQ0YsUUFBTCxFQUFlO0FBQ1gsZ0JBUEdBLFFBT0gsY0FBVztBQUNQTyxxQkFBUyxFQURGO0FBRVBDLG1CQUFPO0FBRkEsU0FBWDtBQUlIO0FBQ0QsUUFBSVAsUUFBSixFQUFjO0FBQ1ZBO0FBQ0g7QUFDSjs7QUFFRDtBQUNPLFNBQVNILFFBQVQsR0FBb0I7QUFDdkIsUUFBTUksTUFBTUcsS0FBS0ksU0FBTCxDQUFlVCxRQUFmLENBQVo7QUFDQUcsaUJBQWFPLE9BQWIsQ0FBcUJYLGtCQUFyQixFQUF5Q0csR0FBekMsRUFGdUIsQ0FFd0I7QUFDL0NTLFlBQVFDLEdBQVIsQ0FBWVAsS0FBS0ksU0FBTCxDQUFlVCxRQUFmLEVBQXlCLElBQXpCLEVBQStCLENBQS9CLENBQVo7QUFDSCIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IExPQ0FMX1NUT1JBR0VfTkFNRSA9ICdmb290YmFsbERhdGEnXG5cbmV4cG9ydCBsZXQganNvbkRhdGEgPSB7fVxuXG4vLyBSZXRyaWV2ZSBkYXRhIGZyb20gbG9jYWxTdG9yYWdlXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGF0YShjYWxsYmFjaykgeyAgIC8vUVVFU1RJT046IGlzIHRoaXMgY29ycmVjdCB0byBwYXNzIGluIGdsb2JhbCB2YXJzIGxpa2UgdGhpcyBpbiBhIG1vZHVsZSBmdW5jdGlvbj9cbiAgICBjb25zdCBzdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShMT0NBTF9TVE9SQUdFX05BTUUpXG4gICAganNvbkRhdGEgPSBKU09OLnBhcnNlKHN0cilcbiAgICBpZiAoIWpzb25EYXRhKSB7XG4gICAgICAgIGpzb25EYXRhID0ge1xuICAgICAgICAgICAgcGxheWVyczogW10sXG4gICAgICAgICAgICBnYW1lczogW11cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKVxuICAgIH1cbn1cblxuLy8gU2F2ZSBkYXRhIHRvIGxvY2FsU3RvcmFnZVxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVEYXRhKCkge1xuICAgIGNvbnN0IHN0ciA9IEpTT04uc3RyaW5naWZ5KGpzb25EYXRhKVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKExPQ0FMX1NUT1JBR0VfTkFNRSwgc3RyKSAgLy9zZXRJdGVtIGFuZCBnZXRJdGVtIGFyZSBwcmV0dHkgbXVjaCBhbGwgeW91IGNhbiBkbyB3aXRoIGxvY2FsU3RvcmFnZVxuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGpzb25EYXRhLCBudWxsLCAyKSApXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9oZWxwZXJzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
/******/ ]);