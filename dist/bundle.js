/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*\n\nSee README.md\n\nCurrent status:\n\nI know much of these functions are not 'pure' but want to make it so. Recognise now that should be passing in the state as args to function definitions, and returning the result.\n\nRequires a LOT of jquery page changes to show/hide sections.\n\nAdvice on structure/approach would be great! Maybe this is approaching the size that a framework like React would be useful??\n\nThis file is getting large. Need to move to some other modules, maybe a game module, a player module.\n\n*/\n\n'use strict';\n\nvar _helpers = __webpack_require__(1);\n\nvar helper = _interopRequireWildcard(_helpers);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n__webpack_require__(2);\n\nvar GAME_FEE = 2; // £\n// const LATE_TAX = 2       // £/min\n// const LOCAL_STORAGE_NAME = 'footballData'\n// let helper.jsonData\n// let teamA = []\n// let teamB = []\n\nvar LATE_TAX = 1;\nvar teamA = void 0;\nvar teamB = void 0;\n\nfunction deleteAllData() {\n    localStorage.removeItem(helper.LOCAL_STORAGE_NAME);\n    location.reload(); // QUESTION: is this the best way to reload the page?\n}\n\nfunction shuffle(array) {\n    // mutates the array\n    // Fisher-Yates (aka Knuth) shuffle\n    // Used like so:\n    // let arr = [2, 11, 37, 42]\n    // arr = shuffle(arr)\n    // console.log(arr)\n\n    var currentIndex = array.length;\n    var temporaryValue = void 0;\n    var randomIndex = void 0;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nfunction findPlayerByName(firstName, lastName) {\n    return helper.jsonData.players.find(function (player) {\n        return player.firstName === firstName && player.lastName === lastName;\n    });\n}\n\nfunction findPlayersBySkillLevel(playersarr, skill) {\n    // requires an array of player objects\n    return playersarr.filter(function (player) {\n        return player.skillLevel === skill;\n    });\n}\n\nfunction justNames(playersArr) {\n    // requires an array of player objects\n    return playersArr.map(function (player) {\n        return player.firstName + ' ' + player.lastName;\n    });\n}\n\nfunction whichTeam(firstName, lastName) {\n    var name = firstName + ' ' + lastName;\n    console.log(name);\n    if (currentGame(helper.jsonData).teamA.includes(name)) {\n        return 'teamA';\n    } else if (currentGame(helper.jsonData).teamB.includes(name)) {\n        return 'teamB';\n    } else {\n        return undefined; // TODO: what to return here?\n    }\n}\n\nfunction currentGame(jsonData) {\n    return jsonData.games[jsonData.games.length - 1];\n}\n\nfunction back() {\n    // used for back-button. Should this be better named?\n    location.reload();\n}\n\nfunction consoleLogDb() {\n    console.log(JSON.stringify(helper.jsonData, null, 2));\n}\n\nfunction genTestData() {\n    // Just for testing\n    createNewPlayer('Tim', 'Handy', 'tim@tim.com', 2);\n    createNewPlayer('Jade', 'Andrews', 'jade@jade.com', 1);\n    createNewPlayer('Sarah', 'Connop', 'sarah@sarah.com', 1);\n    createNewPlayer('Jane', 'Doe', 'jane@jane.com', 2);\n    createNewPlayer('Chris', 'Rollins', 'chris@chris.com', 1);\n    createNewPlayer('Diego', 'Maradona', 'diego@diego.com', 3);\n    createNewPlayer('David', 'Beckham', 'becks@becks.com', 3);\n    createNewPlayer('Misako', 'Cedeira', 'misako@mis.com', 1);\n    createNewPlayer('Karl', 'Cedeira', 'karl@cedeira.com', 2);\n    createNewPlayer('Leah', 'Andrews', 'leah@andrews.com', 1);\n    createNewPlayer('Damo', 'Connop', 'damo@wolves.com', 3);\n\n    $('.gen-test-data').addClass('hidden');\n}\n\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.toLowerCase().slice(1);\n}\n\n// End Helper functions ########################################################\n\nfunction chargePlayers(gameFee, jsonData) {\n    var teamA = currentGame(jsonData).teamA;\n    var teamB = currentGame(jsonData).teamB;\n    var players = teamA.concat(teamB);\n    players.forEach(function (player) {\n        var first = player.split(' ')[0];\n        var last = player.split(' ')[1];\n        findPlayerByName(first, last).moniesOwed += gameFee;\n    });\n    currentGame(jsonData);\n}\n\nfunction createNewPlayer(firstName, lastName, email, skillLevel) {\n    var obj = {\n        created: Date.now(), // TODO: should this date be human readable? Probably. Or should it be like this so that I could run other functions against the date? e.g. show all games from last month etc.?\n        firstName: firstName,\n        lastName: lastName,\n        email: email,\n        active: true,\n        skillLevel: skillLevel,\n        leagueScore: 0,\n        leagueGoalsScored: 0\n    };\n\n    // TODO: appears to be a crossover of responsibility between this function and newPlayerForm ? should these be merged? But then I couldn't call createNewPlayer() manually it would need to pull the data from the form. Where should the form validation go? (It currently goes on the createNewPlayerFromForm). MVC pattern: keep the controller logic away from the model logic in separate functions?\n\n    helper.jsonData.players.push(obj);\n    $('.intro-para').addClass('hidden');\n    helper.saveData();\n}\n\nfunction toggleNewPlayer() {\n    // Show the new player form\n    $('.new-player-form').removeClass('hidden');\n    $('.intro-para').addClass('hidden');\n    $('#new-player-button').addClass('hidden');\n    $('#select-players-button').addClass('hidden');\n    $('#back-button').removeClass('hidden');\n}\n\nfunction createNewPlayerFromForm() {\n    $('#back-button').removeClass('hidden');\n\n    var form = document.getElementById('new-player');\n    var firstName = capitalizeFirstLetter(form.fname.value.trim().split(' ').join(''));\n    var lastName = capitalizeFirstLetter(form.lname.value.trim().split(' ').join(''));\n    var email = form.email.value.toLowerCase();\n    var skillLevel = parseInt(form.skill.value);\n    if (firstName === 'Firstname' || firstName === '') {\n        var msg = 'First Name is required';\n        $('#user-input-error').html('<h3>' + msg + '</h3>').removeClass('hidden'); // TODO: lots of code to DRY up.\n        return;\n    } else if (lastName === 'Lastname' || lastName === '') {\n        var _msg = 'Last Name is required';\n        $('#user-input-error').html('<h3>' + _msg + '</h3>').removeClass('hidden');\n        return;\n    } else if (fullNameExists(firstName, lastName)) {\n        var _msg2 = 'Player name already exists';\n        $('#user-input-error').html('<h3>' + _msg2 + '</h3>').removeClass('hidden');\n    } else if (email === 'email' || emailExists(email) || !validateEmail(email || email === '')) {\n        var _msg3 = 'A valid email address is required. Email must not be a duplicate.';\n        $('#user-input-error').html('<h3>' + _msg3 + '</h3>').removeClass('hidden');\n        return;\n    } else if (skillLevel === 'Skill level (1-3)' || !(skillLevel > 0 && skillLevel < 4)) {\n        var _msg4 = 'Skill level is required';\n        $('#user-input-error').html('<h3>' + _msg4 + '</h3>').removeClass('hidden');\n        return;\n    } else {\n        createNewPlayer(firstName, lastName, email, skillLevel);\n        $('#user-input-error').addClass('hidden');\n        $('#user-input-error').html('<h3>' + 'Player added successfully' + '</h3>').removeClass('hidden');\n    }\n\n    // FIXME: When click in the form fields the contents should highlight select all to allow overwrite. jquery onclick? onactive?\n}\n\nfunction emailExists(email) {\n    // QUESTION: helper function; keep this in a module? or close by to where it's used?\n    return helper.jsonData.players.some(function (player) {\n        return player.email === email;\n    });\n}\n\nfunction fullNameExists(firstName, lastName) {\n    return helper.jsonData.players.some(function (player) {\n        return player.firstName === firstName && player.lastName === lastName;\n    });\n}\n\nfunction validateEmail(email) {\n    // quick & dirty regex email validation\n    var regex = /^(([^<>()\\[\\]\\\\., :\\s@\"]+(\\.[^<>()\\[\\]\\\\., :\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return regex.test(email);\n}\n\n// TODO: need GUI to be able to add moniesOwed to player. Maybe in the edit page?\n\n// QUESTION: MVC? Move all functions into respective sections... for Model, View, and Controller? Might make it easier to understand what's going on?\n\nfunction retirePlayerToggle(firstName, lastName) {\n    // sets player as not active. Removes player from stats display\n    var player = findPlayerByName(firstName, lastName);\n    if (player.moniesOwed !== 0) {\n        return 'Monies owed is not zero! Unable to retire player. Monies owed: \\xA3' + player.moniesOwed;\n    } else if (player.active) {\n        player.active = false;\n        player.dateDisabled = Date();\n    } else if (!player.active) {\n        player.active = true;\n        delete player.dateDisabled;\n    }\n    helper.saveData();\n}\n\n// QUESTION: appears to be a lot of firstName, lastName being passed around... can I fix that??? What would be simpler or more appropriate? a lot of what I'm doing is storing names in arrays, then when needing to update the player object, I'm finding the actual object to work on, and updating it. This seems a long way around. Should I pass around the actual player object instead? ie. when players are picked, store the array of player objects and can then act directly on them, updating scores etc, and finally at end of game store that player back to the main store? What's the typical approach?\n\nfunction setSkillLevel(firstName, lastName, skillLevel) {\n    // jsonData is an object, containing a players key, whose value is an array of player objects.\n    var player = findPlayerByName(firstName, lastName);\n    if (player) {\n        player.skillLevel = skillLevel;\n    } else {\n        console.log('Player does not exist');\n    }\n    helper.saveData();\n}\n\n// QUESTION: When putting data into objects is it standard practice to clean it on the way in, or only when pulling data out? e.g. correct capitalization.\n\nfunction editPlayer() {\n    // TODO: or just do it from a view of player data? Drop down for player to display their info, then edit required fields and save back to the DB in one go.\n}\n\nfunction updateMoniesOwed(firstName, lastName, currencyValue) {\n    // Can be plus or minus £/$\n    // update helper.jsonData moniesOwed field\n    findPlayerByName(firstName, lastName).moniesOwed += currencyValue;\n    helper.saveData();\n}\n\n// TODO: write this newSeason function\n// function newSeason() {\n//   // Archive off this season's data (previousGameStats and helper.jsonData to another file) then wipe\n//   // Create a new localStorage entry and copy all data to that one\n//   // This seasons data, including all stats, but leaving players and moniesOwed (reset their scores)\n// }\n\n// function newFixture() {\n//   // Generate a new game date for the calendar and maybe email the 'active' status players\n// }\n\n\n// Pre-game ####################################################################\n\nfunction playerLate(firstName, lastName, minutesLate) {\n    // TODO: Add this to edit player page?\n    var tax = LATE_TAX * minutesLate;\n\n    var player = findPlayerByName(firstName, lastName);\n    player.moniesOwed += tax;\n    // later could have the app do the time keeping, and generate the mins late from the time of the game start?\n}\n\nfunction displayAvailablePlayers() {\n    // QUESTION: is this mixing controller and view?\n    // generate an li for each player in players\n    var players = justNames(helper.jsonData.players).sort(); // ['Tim Handy', 'First Last']\n    var list = $('#select-players ul');\n    var template = $('#players-template').html();\n    $(list).html('');\n    players.forEach(function (player) {\n        //$(list).append(Mustache.render(template, player))\n        // FIXME: Mustache: why does this render a load of spaces/tabs? and a newline in the html? see inspect on one of the li elements.\n        $(list).append('<li><input type=\"checkbox\" name=\"player\" value=\"' + player + '\"> ' + player + '</li>');\n    });\n    $('li').addClass('li-checkbox'); // rquired after adding the dynamic li players, otherwise the checkboxes were tiny\n    $('.intro-para').addClass('hidden');\n    $('.available-players').removeClass('hidden');\n    $('.generate-teams').removeClass('hidden');\n    $('#select-players-button').addClass('hidden');\n    $('#new-player-button').addClass('hidden');\n    $('#back-button').removeClass('hidden');\n}\n\nvar chosenPlayers = []; // FIXME: dirty global variable, refactor to remove\nfunction choosePlayers() {\n    var players = document.getElementsByName('player');\n    players = Array.prototype.slice.call(players);\n    for (var i = 0; i < players.length; i++) {\n        // TODO: dirty for loop, use filter instead\n        if (players[i].checked) {\n            chosenPlayers.push(players[i]);\n        }\n    }\n\n    chosenPlayers = chosenPlayers.map(function (player) {\n        return player.value;\n    }).map(function (player) {\n        return findPlayerByName(player.split(' ')[0], player.split(' ')[1]);\n    });\n    return chosenPlayers; // TODO: not sure I need to return this right now, as the function sets the var chosenPlayers. Dirty. make other functions use this function as a return expression.\n\n    // TODO: seems to be a lot going on with letiables of chosenPlayers without being saved to storage, maybe chosen players should be stored early on?\n}\n\n// TODO: this is a massive function. Is this wrong?\n// QUESTION: Should the click handler functions be named xxxxHandler so it can be seen that they have an event related to them?\nfunction generateTeams(chosenPlayers, callback) {\n    teamA = [];\n    teamB = [];\n    var players = chosenPlayers.slice(0); // QUESTION: makes a copy of chosenPlayers  ['Tim Handy', 'Jade Andrews']. Is this the right thing to do so as to not mutate the original array?\n    // TODO: validate the generateTeams button, there must be > 1 players selected\n\n    var threeStarPlayers = shuffle(justNames(findPlayersBySkillLevel(players, 3))); // ['David Beckham', 'Diego Maradonna']. TODO Think I've just created objects (choosePlayers) from strings and then back again to strings in here!\n    var twoStarPlayers = shuffle(justNames(findPlayersBySkillLevel(players, 2)));\n    var oneStarPlayers = shuffle(justNames(findPlayersBySkillLevel(players, 1)));\n\n    var lineUp = threeStarPlayers.concat(twoStarPlayers, oneStarPlayers);\n    console.log('Lineup: ', lineUp); // ['David Beckham', 'Diego Maradonna', \"Damo Connop\", \"Tim Handy\", \"Jane Doe\", \"Karl Cedeira\", \"Chris Rollins\", \"Jade Andrews\", \"Leah Andrews\"]\n\n    while (lineUp.length > 0) {\n        teamA.push(lineUp.pop());\n        teamB.push(lineUp.pop()); // TODO: does this need to be a callback so that it does it in order? Not sure why it seems to do it ok... because it's a quick operation?\n    }\n\n    teamB = teamB.filter(Boolean); // remove an 'undefined' from teamB if uneven number of players.\n\n    if (teamA.length !== teamB.length) {\n        // aid in evening up teams if uneven number of skillLevel 3 players\n        teamB.unshift(teamA.shift()); // moves a skillLevel 1 player from team A to team B\n    }\n\n    console.log('Team A: ', teamA);\n    console.log('Team B: ', teamB);\n\n    $('#team-a').html(teamA.map(function (name) {\n        // TODO: this is mixing view code with the model code. Bad? Maybe should have an updateTeamView function or something?\n        if (teamA.indexOf(name) === teamA.length - 1) {\n            return name;\n        } else {\n            return name + ', ';\n        }\n    }));\n\n    $('#team-b').html(teamB.map(function (name) {\n        // TODO: this is doing same as above, so DRY it up?\n        if (teamB.indexOf(name) === teamB.length - 1) {\n            return name;\n        } else {\n            return name + ', ';\n        }\n    }));\n    $('.intro-para').addClass('hidden'); // TODO: should this all be wrapped up in a function?\n    $('.generate-teams').addClass('hidden');\n    $('.kickoff').removeClass('hidden');\n    $('.players').removeClass('hidden');\n    $('.available-players').addClass('hidden');\n    $('.new-player-form').addClass('hidden');\n\n    if (callback) {\n        callback();\n    }\n\n    // helper.saveData()    // don't need to save here, not necessary until the 'Kickoff' button pressed?\n}\n\nfunction wrapperforGenerateTeams() {\n    // TODO: this is bad having to make a wrapper. think now I have moved the onclick events to here from the the html I might not need this. It's also a noun, not a verb.\n    generateTeams(choosePlayers()); // TODO: can I put this directly into the click handler?\n}\n\n// Game-time  ##################################################################\n\nfunction kickOff() {\n    generateGame(teamA, teamB); // FIXME: this should not have a global vars for teamA and B, they should be stored in jsonData, and be passed in as a args.\n    chargePlayers(GAME_FEE, helper.jsonData);\n    populatePlayerDropdown(teamA.concat(teamB));\n    $('.game-date').html(currentGame(helper.jsonData).date);\n    $('.game-date-div').removeClass('hidden');\n    $('.game').removeClass('hidden');\n    $('.goal').removeClass('hidden');\n    $('.final-whistle').removeClass('hidden');\n    $('.kickoff').addClass('hidden');\n    $('.generate-teams').addClass('hidden');\n    $('.delete-game').removeClass('hidden');\n    $('#back-button').addClass('hidden');\n}\n\nfunction populatePlayerDropdown(playerNamesArr) {\n    var players = playerNamesArr;\n    var list = $('#dropdown-options');\n    $(list).html('<option>Player Name</option>');\n    players.forEach(function (player) {\n        $(list).append('<option>' + player + '</option>');\n    });\n}\n\nfunction generateGame(teamA, teamB) {\n    var game = {\n        date: Date(),\n        teamA: teamA, // ['Tim Handy', 'Karl Cedeira']\n        teamB: teamB, // ['Jade Andrews', 'Sarah Connop']\n        teamAScore: 0,\n        teamBScore: 0,\n        scorers: [], // ['Tim Handy', 'Jade Andrews', 'Karl Cedeira']  order in which goals were scored\n        endTime: undefined // QUESTION: undefined or null?? which is most appropriate? Think undefined is for properties and vals, and null is for objects.\n    };\n\n    helper.jsonData.games.push(game);\n    helper.saveData();\n}\n\nfunction goalHandler() {\n    var dropdown = document.getElementById('dropdown-options'); // QUESTION: is there a better way to do a dropdown here?\n    var player = dropdown.options[dropdown.selectedIndex].value;\n    var firstName = player.split(' ')[0];\n    var lastName = player.split(' ')[1];\n    goalScored(firstName, lastName);\n    // TODO: validation: must choose a real player. 'Player Name' should not be a valid choice.\n    // TODO: set dropdown back to 'Player Name' after valid goal button press\n    // TODO: make the dropdown more visible  background color?\n}\n\nfunction goalScored(firstName, lastName) {\n    if (!currentGame(helper.jsonData).endTime) {\n        currentGame(helper.jsonData).scorers.push(firstName + ' ' + lastName);\n        console.log('Scorer: ' + firstName + ' ' + lastName + ' added');\n        updatePlayerLeagueGoalsScored(firstName, lastName, 1); // TODO: should only be added at final whistle in case game is cancelled  move this, or set a cancel function to reverse the change?\n        updateGameScore(firstName, lastName);\n        $('.team-a-score').html(currentGame(helper.jsonData).teamAScore);\n        $('.team-b-score').html(currentGame(helper.jsonData).teamBScore);\n        // TODO: player name on the dropdown should default back to 'Player Name' after goal button is pressed\n        // TODO: update the players list at the top with goals scored: Team A: Chris Rollins(1), Damo Connop(5) etc.\n        helper.saveData();\n    } else {\n        console.log('game has already ended');\n    }\n}\n\nfunction updateGameScore(firstName, lastName) {\n    if (whichTeam(firstName, lastName) === 'teamA') {\n        currentGame(helper.jsonData).teamAScore += 1;\n    } else if (whichTeam(firstName, lastName) === 'teamB') {\n        currentGame(helper.jsonData).teamBScore += 1;\n    } else {\n        console.log('player not on either team?');\n    }\n}\n\nfunction updatePlayerLeagueGoalsScored(firstName, lastName, goalsScored) {\n    var player = findPlayerByName(firstName, lastName);\n    console.log(player);\n    player.leagueGoalsScored ? player.leagueGoalsScored += 1 : player.leagueGoalsScored = goalsScored; // need a ternary because it wouldn't += on a null or missing key\n    helper.saveData();\n    // TODO: this should only be added at final whistle, in case game is cancelled\n}\n\nfunction assignWinningPoints(callback) {\n    // TODO: Looks ripe for refactoring. Tried it, didn't work... try again!\n    // if draw\n    if (currentGame(helper.jsonData).endTime) {\n        if (currentGame(helper.jsonData).teamAScore === currentGame(helper.jsonData).teamBScore) {\n            // each player on both sides gets 2 leagueScore point\n            for (var i = 0; i < currentGame(helper.jsonData).teamA.length; i++) {\n                // TODO: use a .map here?\n                var name = currentGame(helper.jsonData).teamA[i].split(' ');\n                var firstName = name[0];\n                var lastName = name[1];\n                updatePlayerLeagueScore(firstName, lastName, 2);\n            }\n            for (var _i = 0; _i < currentGame(helper.jsonData).teamB.length; _i++) {\n                var _name = currentGame(helper.jsonData).teamB[_i].split(' ');\n                var _firstName = _name[0];\n                var _lastName = _name[1];\n                updatePlayerLeagueScore(_firstName, _lastName, 2);\n            }\n            // if teamA won\n        } else if (currentGame(helper.jsonData).teamAScore > currentGame(helper.jsonData).teamBScore) {\n            for (var _i2 = 0; _i2 < currentGame(helper.jsonData).teamA.length; _i2++) {\n                var _name2 = currentGame(helper.jsonData).teamA[_i2].split(' ');\n                var _firstName2 = _name2[0];\n                var _lastName2 = _name2[1];\n                updatePlayerLeagueScore(_firstName2, _lastName2, 3);\n            }\n            for (var _i3 = 0; _i3 < currentGame(helper.jsonData).teamB.length; _i3++) {\n                var _name3 = currentGame(helper.jsonData).teamB[_i3].split(' ');\n                var _firstName3 = _name3[0];\n                var _lastName3 = _name3[1];\n                updatePlayerLeagueScore(_firstName3, _lastName3, 1);\n            }\n            // if teamB won\n        } else if (currentGame(helper.jsonData).teamAScore < currentGame(helper.jsonData).teamBScore) {\n            for (var _i4 = 0; _i4 < currentGame(helper.jsonData).teamA.length; _i4++) {\n                var _name4 = currentGame(helper.jsonData).teamA[_i4].split(' ');\n                var _firstName4 = _name4[0];\n                var _lastName4 = _name4[1];\n                updatePlayerLeagueScore(_firstName4, _lastName4, 1);\n            }\n            for (var _i5 = 0; _i5 < currentGame(helper.jsonData).teamB.length; _i5++) {\n                var _name5 = currentGame(helper.jsonData).teamB[_i5].split(' ');\n                var _firstName5 = _name5[0];\n                var _lastName5 = _name5[1];\n                updatePlayerLeagueScore(_firstName5, _lastName5, 3);\n            }\n        }\n    } else {\n        console.log('game end time not set');\n    }\n\n    if (callback) {\n        callback();\n    }\n}\n\nfunction updatePlayerLeagueScore(firstName, lastName, points) {\n    var player = findPlayerByName(firstName, lastName);\n    if (player.leagueScore) {\n        // TODO: try with a ternary now it's working\n        player.leagueScore += points;\n    } else {\n        player.leagueScore = points;\n    }\n    helper.saveData();\n}\n\nfunction finalWhistle() {\n    // TODO: rename with ...Handler?\n    setGameEndTime();\n    assignWinningPoints(function () {\n        getLeagueStats(helper.jsonData);\n\n        $('.final-score').removeClass('hidden');\n        $('.final-score p:nth-of-type(1)').html('Team A: ' + currentGame(helper.jsonData).teamAScore);\n        $('.final-score p:nth-of-type(2)').html('Team B: ' + currentGame(helper.jsonData).teamBScore);\n        var gameScorers = currentGame(helper.jsonData).scorers;\n        gameScorers = gameScorers.map(function (player) {\n            if (gameScorers.indexOf(player) === gameScorers.length - 1) {\n                return player;\n            } else {\n                return player + ', ';\n            }\n        });\n\n        $('.final-score p:nth-of-type(2)').append('<p>Scorers: ' + gameScorers.join('') + '</p>');\n        $('.goal').addClass('hidden');\n        $('.final-whistle').addClass('hidden');\n        $('.game').addClass('hidden');\n        $('#back-button').removeClass('hidden');\n        $('#back-button').addClass('btn-primary').removeClass('btn-default');\n    });\n}\n\nfunction setGameEndTime() {\n    // update latest game's endTime. This is used to determine whether game complete or not.\n    currentGame(helper.jsonData).endTime = Date();\n    helper.saveData();\n}\n\nfunction deleteCurrentGame(jsonData) {\n    jsonData.games.splice(-1, 1);\n    helper.saveData();\n    // TODO: this should remove any scores added to players scores\n    // TODO: add a 'are you sure, yes/no' thing. modal?\n}\n\n// Game stats functions ########################################################\n\nfunction getLeagueStats(jsonData) {\n    // Mixed model and view? ...this also displays data. maybe this should be broken into two: a getstats and an update view type function\n    var players = jsonData.players.map(function (player) {\n        return {\n            playerName: player.firstName + ' ' + player.lastName,\n            leagueScore: player.leagueScore,\n            leagueGoalsScored: player.leagueGoalsScored\n        };\n    });\n    // TODO: require a .filter here to remove the player.active === false users. Don't want to display the inactive users.\n    players.sort(function (a, b) {\n        return b.leagueScore - a.leagueScore;\n    });\n    $('#league-stats').removeClass('hidden');\n    $('#league-stats ul').html('');\n    players.forEach(function (player) {\n        if (player.leagueScore > 0 || player.leagueGoalsScored > 0) {\n            $('#league-stats ul').append('<li>' + player.leagueScore + ' points: ' + player.playerName + ' (Goals: ' + player.leagueGoalsScored + ') </li>');\n        }\n        console.log(player.leagueScore + ': ' + player.playerName);\n    });\n\n    // IDEA: For manager: highlight low skill level but high score... indicator of incorrect skill score?\n    // IDEA: Scores are emailed out to all active players.\n}\n\nfunction displayRawData() {\n    document.write(localStorage.getItem(LOCAL_STORAGE_NAME));\n}\n\n// If database is present and game ongoing, i.e. no endTime, restore previous gamestate\n$(document).ready(function () {\n\n    helper.getData(function () {\n        if (helper.jsonData.players.length === 0) {\n            $('.intro-para').removeClass('hidden');\n        }\n        if (helper.jsonData.players.length > 0) {\n            $('.gen-test-data').addClass('hidden');\n            $('.intro-para').addClass('hidden');\n        }\n\n        if (helper.jsonData.games.length > 0) {\n            getLeagueStats(helper.jsonData);\n            $('#league-stats').removeClass('hidden');\n        }\n\n        // TODO: make this into a 'recover state' type function that can be called in several places.\n        if (localStorage.getItem(helper.LOCAL_STORAGE_NAME) && currentGame(helper.jsonData) && !currentGame(helper.jsonData).hasOwnProperty('endTime')) {\n            $('.intro-para').addClass('hidden'); // TODO: this is a lot of jquery... might want to combine some of this into divs?\n            $('.gen-test-data').addClass('hidden');\n            $('#select-players-button').addClass('hidden');\n            $('#new-player-button').addClass('hidden');\n            $('.game-date').html(currentGame(helper.jsonData).date); // TODO: chop off the GMT bit: Tue Oct 18 2016 16:52:29 GMT+0100 (BST)\n            $('.game-date-div').removeClass('hidden');\n            $('.players').removeClass('hidden');\n            $('.available-players').addClass('hidden');\n            $('.new-player-form').addClass('hidden');\n            $('.game span').html(currentGame(helper.jsonData).date);\n            $('.goal').removeClass('hidden');\n            $('.final-whistle').removeClass('hidden');\n            $('.kickoff').addClass('hidden');\n            $('.generate-teams').addClass('hidden');\n            $('#team-a').html(currentGame(helper.jsonData).teamA.map(function (name) {\n                return name + ', ';\n            }));\n            $('#team-b').html(currentGame(helper.jsonData).teamB.map(function (name) {\n                return name + ', ';\n            }));\n            $('.team-a-score').html(currentGame(helper.jsonData).teamAScore);\n            $('.team-b-score').html(currentGame(helper.jsonData).teamBScore);\n            $('.delete-game').removeClass('hidden');\n            $('#back-button').addClass('hidden');\n            populatePlayerDropdown(currentGame(helper.jsonData).teamA.concat(currentGame(helper.jsonData).teamB));\n        } else {\n            //$('.gen-test-data').removeClass('hidden')\n            $('#back-button').addClass('hidden');\n        }\n    }); // TODO: should this be wrapped in an 'init' function so it's clear what's going on?\n});\n\n// QUESTION: lots of click handlers here. Is this the right thing to do? - perhaps make a case statement for these.\n\n$('#new-player-button').click(function () {\n    toggleNewPlayer();\n});\n\n$('#new-player-submit-button').click(function () {\n    createNewPlayerFromForm();\n});\n\n$('#select-players-button').click(function () {\n    displayAvailablePlayers();\n});\n\n$('#generate-teams-button').click(function () {\n    wrapperforGenerateTeams();\n});\n\n$('#kickoff-button').click(function () {\n    kickOff();\n});\n\n$('#goal-button').click(function () {\n    goalHandler();\n});\n\n$('#final-whistle-button').click(function () {\n    finalWhistle();\n});\n\n$('#back-button').click(function () {\n    back();\n});\n\n$('#delete-game-button').click(function () {\n    deleteCurrentGame(helper.jsonData);\n    location.reload();\n});\n\n$('#delete-db-button').click(function () {\n    deleteAllData();\n    location.reload();\n});\n\n$('#generate-test-players-button').click(function () {\n    genTestData();\n    //location.reload()\n});\n\n$('#consolelog-db-button').click(function () {\n    consoleLogDb();\n    location.reload();\n});\n\n// TODO: check for remaining functions written but not implemented\n// TODO: add bootstrap - it looks bad on a phone in particular\n// TODO: allow adding a player once game is in progress. late players? maybe a dropdown of remaining unchosen players displayed whilst game is in progress.\n// TODO: add some font awesome icons to buttons\n\n// Data storage format:\n// helper.jsonData = {\n//   \"players\": [      // array of objects, so can iterate through the array of objects\n//     {\n//       \"created\": 1476284285984,\n//       \"firstName\": \"Tim\",\n//       \"lastName\": \"Handy\",\n//       \"email\": \"tim@tim.com\",\n//       \"active\": true,\n//       \"skillLevel\": 2,\n//       \"moniesOwed\": 10,\n//     \"leagueScore\": 0,\n//       \"leagueGoalsScored\": 5\n//     },\n//   ],\n//   \"games\": [\n//     {\n//       \"date\": \"Wed Oct 12 2016 15:58:05 GMT+0100 (BST)\",\n//       \"teamA\": [\n//         \"Jane Doe\",\n//         \"David Beckham\",\n//         \"Leah Andrews\",\n//         \"Tim Handy\",\n//         \"Diego Maradonna\",\n//         \"Misako Cedeira\"\n//       ],\n//       \"teamB\": [\n//         \"Chris Rollins\",\n//         \"John Doe\",\n//         \"Joe Bloggs\",\n//         \"Jade Andrews\",\n//         \"Karl Cedeira\"\n//       ],\n//       \"teamAScore\": 2,\n//       \"teamBScore\": 1,\n//       \"scorers\": [\n//         \"Dave Jones\",\n//         \"Jade Andrews\",\n//         \"Jade Andrews\",\n//         \"Karl Cedeira\",\n//         \"Tim Handy\",\n//         \"Tim Handy\",\n//         \"Tim Handy\",\n//         \"Chris Rollins\"\n//       ],\n//       \"endTime\": null\n//     }\n//   ]\n// }\n\n\n// learn testing: mocha\n//\n// don't do assertion libraries (eg. chai) yet!\n//\n// use the node.js built in assert library. require asserts.\n//\n// testing math.random. pass in a seed value. google seeded random generator.//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getData = getData;\nexports.saveData = saveData;\nvar LOCAL_STORAGE_NAME = exports.LOCAL_STORAGE_NAME = 'footballData';\n\nvar jsonData = exports.jsonData = {};\n\n// Retrieve data from localStorage\nfunction getData(callback) {\n    //QUESTION: is this correct to pass in global vars like this in a module function?\n    var str = localStorage.getItem(LOCAL_STORAGE_NAME);\n    exports.jsonData = jsonData = JSON.parse(str);\n    if (!jsonData) {\n        exports.jsonData = jsonData = {\n            players: [],\n            games: []\n        };\n    }\n    if (callback) {\n        callback();\n    }\n}\n\n// Save data to localStorage\nfunction saveData() {\n    var str = JSON.stringify(jsonData);\n    localStorage.setItem(LOCAL_STORAGE_NAME, str); //setItem and getItem are pretty much all you can do with localStorage\n    console.log(JSON.stringify(jsonData, null, 2));\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaGVscGVycy5qcz83MTdkIl0sIm5hbWVzIjpbImdldERhdGEiLCJzYXZlRGF0YSIsIkxPQ0FMX1NUT1JBR0VfTkFNRSIsImpzb25EYXRhIiwiY2FsbGJhY2siLCJzdHIiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiSlNPTiIsInBhcnNlIiwicGxheWVycyIsImdhbWVzIiwic3RyaW5naWZ5Iiwic2V0SXRlbSIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7O1FBS2dCQSxPLEdBQUFBLE87UUFlQUMsUSxHQUFBQSxRO0FBcEJULElBQU1DLGtEQUFxQixjQUEzQjs7QUFFQSxJQUFJQyw4QkFBVyxFQUFmOztBQUVQO0FBQ08sU0FBU0gsT0FBVCxDQUFpQkksUUFBakIsRUFBMkI7QUFBSTtBQUNsQyxRQUFNQyxNQUFNQyxhQUFhQyxPQUFiLENBQXFCTCxrQkFBckIsQ0FBWjtBQUNBLFlBTE9DLFFBS1AsY0FBV0ssS0FBS0MsS0FBTCxDQUFXSixHQUFYLENBQVg7QUFDQSxRQUFJLENBQUNGLFFBQUwsRUFBZTtBQUNYLGdCQVBHQSxRQU9ILGNBQVc7QUFDUE8scUJBQVMsRUFERjtBQUVQQyxtQkFBTztBQUZBLFNBQVg7QUFJSDtBQUNELFFBQUlQLFFBQUosRUFBYztBQUNWQTtBQUNIO0FBQ0o7O0FBRUQ7QUFDTyxTQUFTSCxRQUFULEdBQW9CO0FBQ3ZCLFFBQU1JLE1BQU1HLEtBQUtJLFNBQUwsQ0FBZVQsUUFBZixDQUFaO0FBQ0FHLGlCQUFhTyxPQUFiLENBQXFCWCxrQkFBckIsRUFBeUNHLEdBQXpDLEVBRnVCLENBRXdCO0FBQy9DUyxZQUFRQyxHQUFSLENBQVlQLEtBQUtJLFNBQUwsQ0FBZVQsUUFBZixFQUF5QixJQUF6QixFQUErQixDQUEvQixDQUFaO0FBQ0giLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBMT0NBTF9TVE9SQUdFX05BTUUgPSAnZm9vdGJhbGxEYXRhJ1xuXG5leHBvcnQgbGV0IGpzb25EYXRhID0ge31cblxuLy8gUmV0cmlldmUgZGF0YSBmcm9tIGxvY2FsU3RvcmFnZVxuZXhwb3J0IGZ1bmN0aW9uIGdldERhdGEoY2FsbGJhY2spIHsgICAvL1FVRVNUSU9OOiBpcyB0aGlzIGNvcnJlY3QgdG8gcGFzcyBpbiBnbG9iYWwgdmFycyBsaWtlIHRoaXMgaW4gYSBtb2R1bGUgZnVuY3Rpb24/XG4gICAgY29uc3Qgc3RyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oTE9DQUxfU1RPUkFHRV9OQU1FKVxuICAgIGpzb25EYXRhID0gSlNPTi5wYXJzZShzdHIpXG4gICAgaWYgKCFqc29uRGF0YSkge1xuICAgICAgICBqc29uRGF0YSA9IHtcbiAgICAgICAgICAgIHBsYXllcnM6IFtdLFxuICAgICAgICAgICAgZ2FtZXM6IFtdXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKClcbiAgICB9XG59XG5cbi8vIFNhdmUgZGF0YSB0byBsb2NhbFN0b3JhZ2VcbmV4cG9ydCBmdW5jdGlvbiBzYXZlRGF0YSgpIHtcbiAgICBjb25zdCBzdHIgPSBKU09OLnN0cmluZ2lmeShqc29uRGF0YSlcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShMT0NBTF9TVE9SQUdFX05BTUUsIHN0cikgIC8vc2V0SXRlbSBhbmQgZ2V0SXRlbSBhcmUgcHJldHR5IG11Y2ggYWxsIHlvdSBjYW4gZG8gd2l0aCBsb2NhbFN0b3JhZ2VcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShqc29uRGF0YSwgbnVsbCwgMikgKVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2hlbHBlcnMuanMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(3);\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(5)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../node_modules/css-loader/index.js!./styles.css\", function() {\n\t\t\tvar newContent = require(\"!!./../node_modules/css-loader/index.js!./styles.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzLmNzcz9mNDkyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQWdGO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZXMuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlcy5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZXMuY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9zdHlsZXMuY3NzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("exports = module.exports = __webpack_require__(4)();\n// imports\n\n\n// module\nexports.push([module.id, \".dev-tools{\\n\\tborder: solid 2px grey;\\n\\tmargin-bottom: 50px;\\n\\t/*display:none;*/\\n}\\n \\t.dev-tools button {\\n\\t\\t/*height: auto;\\n\\t\\twidth: auto;*/\\n        /*display: inline;*/\\n\\t\\tfont-size: 2em;\\n\\t}\\n\\n.hidden{\\n\\tdisplay: none;\\n}\\n\\n.delete-game{\\n\\tpadding-top: 50px;\\t\\t\\t/* temporary !! */\\n}\\n\\n\\n\\nli{\\n\\tlist-style-type: none;\\n\\tfont-size: 3em;\\n}\\n\\nh1{\\n\\tfont-size: 60px;\\n}\\n\\nh3{\\n\\tfont-size: 50px;\\n}\\n\\n\\np{\\n\\tfont-size: 40px;\\n}\\n\\n/*input[type=checkbox] {\\n    zoom: 0;\\n    font-size: 10px;\\n\\tfont-size: 40px;\\n\\tvertical-align: middle;\\n\\tmargin-top: 0;\\n}*/\\n\\n.li-checkbox [type=checkbox] {\\n    /*zoom: 0;   not a good way to to this*/\\n\\twidth: 1.5em;\\n\\theight: 1.5em;\\n\\tvertical-align: middle;\\n\\tmargin-top: 0;\\n}\\n\\n.btn-huge{\\n    padding-top:20px;\\n    padding-bottom:20px;\\n}\\n\\n.wrapper button {\\n\\tmargin-top: 40px;\\n\\tmargin-bottom: 40px;\\n\\tfont-size: 5em;\\n}\\n\\n.input-lg {\\n    height: 80px;\\n    font-size: 40px;\\n}\\n\\n.form-control{\\n\\theight: 100px;\\n\\tfont-size: 50px;\\n}\\n\\n\\n\", \"\"]);\n\n// exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzLmNzcz9hMjc3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EscUNBQXFDLDJCQUEyQix3QkFBd0IsbUJBQW1CLEtBQUssd0JBQXdCLHFCQUFxQixrQkFBa0IsOEJBQThCLHVCQUF1QixLQUFLLFlBQVksa0JBQWtCLEdBQUcsaUJBQWlCLHNCQUFzQiwyQkFBMkIsV0FBVywwQkFBMEIsbUJBQW1CLEdBQUcsT0FBTyxvQkFBb0IsR0FBRyxPQUFPLG9CQUFvQixHQUFHLFFBQVEsb0JBQW9CLEdBQUcsNEJBQTRCLGNBQWMsc0JBQXNCLG9CQUFvQiwyQkFBMkIsa0JBQWtCLEdBQUcsb0NBQW9DLGdCQUFnQiwrQ0FBK0Msa0JBQWtCLDJCQUEyQixrQkFBa0IsR0FBRyxjQUFjLHVCQUF1QiwwQkFBMEIsR0FBRyxxQkFBcUIscUJBQXFCLHdCQUF3QixtQkFBbUIsR0FBRyxlQUFlLG1CQUFtQixzQkFBc0IsR0FBRyxrQkFBa0Isa0JBQWtCLG9CQUFvQixHQUFHOztBQUUzaEMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmRldi10b29sc3tcXG5cXHRib3JkZXI6IHNvbGlkIDJweCBncmV5O1xcblxcdG1hcmdpbi1ib3R0b206IDUwcHg7XFxuXFx0LypkaXNwbGF5Om5vbmU7Ki9cXG59XFxuIFxcdC5kZXYtdG9vbHMgYnV0dG9uIHtcXG5cXHRcXHQvKmhlaWdodDogYXV0bztcXG5cXHRcXHR3aWR0aDogYXV0bzsqL1xcbiAgICAgICAgLypkaXNwbGF5OiBpbmxpbmU7Ki9cXG5cXHRcXHRmb250LXNpemU6IDJlbTtcXG5cXHR9XFxuXFxuLmhpZGRlbntcXG5cXHRkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uZGVsZXRlLWdhbWV7XFxuXFx0cGFkZGluZy10b3A6IDUwcHg7XFx0XFx0XFx0LyogdGVtcG9yYXJ5ICEhICovXFxufVxcblxcblxcblxcbmxpe1xcblxcdGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG5cXHRmb250LXNpemU6IDNlbTtcXG59XFxuXFxuaDF7XFxuXFx0Zm9udC1zaXplOiA2MHB4O1xcbn1cXG5cXG5oM3tcXG5cXHRmb250LXNpemU6IDUwcHg7XFxufVxcblxcblxcbnB7XFxuXFx0Zm9udC1zaXplOiA0MHB4O1xcbn1cXG5cXG4vKmlucHV0W3R5cGU9Y2hlY2tib3hdIHtcXG4gICAgem9vbTogMDtcXG4gICAgZm9udC1zaXplOiAxMHB4O1xcblxcdGZvbnQtc2l6ZTogNDBweDtcXG5cXHR2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcblxcdG1hcmdpbi10b3A6IDA7XFxufSovXFxuXFxuLmxpLWNoZWNrYm94IFt0eXBlPWNoZWNrYm94XSB7XFxuICAgIC8qem9vbTogMDsgICBub3QgYSBnb29kIHdheSB0byB0byB0aGlzKi9cXG5cXHR3aWR0aDogMS41ZW07XFxuXFx0aGVpZ2h0OiAxLjVlbTtcXG5cXHR2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcblxcdG1hcmdpbi10b3A6IDA7XFxufVxcblxcbi5idG4taHVnZXtcXG4gICAgcGFkZGluZy10b3A6MjBweDtcXG4gICAgcGFkZGluZy1ib3R0b206MjBweDtcXG59XFxuXFxuLndyYXBwZXIgYnV0dG9uIHtcXG5cXHRtYXJnaW4tdG9wOiA0MHB4O1xcblxcdG1hcmdpbi1ib3R0b206IDQwcHg7XFxuXFx0Zm9udC1zaXplOiA1ZW07XFxufVxcblxcbi5pbnB1dC1sZyB7XFxuICAgIGhlaWdodDogODBweDtcXG4gICAgZm9udC1zaXplOiA0MHB4O1xcbn1cXG5cXG4uZm9ybS1jb250cm9se1xcblxcdGhlaWdodDogMTAwcHg7XFxuXFx0Zm9udC1zaXplOiA1MHB4O1xcbn1cXG5cXG5cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlciEuL3NyYy9zdHlsZXMuY3NzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzP2RhMDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0Esd0NBQXdDLGdCQUFnQjtBQUN4RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgbGlzdCA9IFtdO1xyXG5cclxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHJcblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcclxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcclxuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxyXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxpc3Q7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(false) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);